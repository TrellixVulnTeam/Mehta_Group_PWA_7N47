{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { IonicNativePlugin, cordova, cordovaPropertyGet, cordovaPropertySet } from '@ionic-native/core';\nimport * as Éµngcc0 from '@angular/core';\n\nvar Diagnostic = function (_super) {\n  __extends(Diagnostic, _super);\n\n  function Diagnostic() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.permission = {\n      READ_CALENDAR: 'READ_CALENDAR',\n      WRITE_CALENDAR: 'WRITE_CALENDAR',\n      CAMERA: 'CAMERA',\n      READ_CONTACTS: 'READ_CONTACTS',\n      WRITE_CONTACTS: 'WRITE_CONTACTS',\n      GET_ACCOUNTS: 'GET_ACCOUNTS',\n      ACCESS_FINE_LOCATION: 'ACCESS_FINE_LOCATION',\n      ACCESS_COARSE_LOCATION: 'ACCESS_COARSE_LOCATION',\n      RECORD_AUDIO: 'RECORD_AUDIO',\n      READ_PHONE_STATE: 'READ_PHONE_STATE',\n      CALL_PHONE: 'CALL_PHONE',\n      ADD_VOICEMAIL: 'ADD_VOICEMAIL',\n      USE_SIP: 'USE_SIP',\n      PROCESS_OUTGOING_CALLS: 'PROCESS_OUTGOING_CALLS',\n      READ_CALL_LOG: 'READ_CALL_LOG',\n      WRITE_CALL_LOG: 'WRITE_CALL_LOG',\n      SEND_SMS: 'SEND_SMS',\n      RECEIVE_SMS: 'RECEIVE_SMS',\n      READ_SMS: 'READ_SMS',\n      RECEIVE_WAP_PUSH: 'RECEIVE_WAP_PUSH',\n      RECEIVE_MMS: 'RECEIVE_MMS',\n      WRITE_EXTERNAL_STORAGE: 'WRITE_EXTERNAL_STORAGE',\n      READ_EXTERNAL_STORAGE: 'READ_EXTERNAL_STORAGE',\n      BODY_SENSORS: 'BODY_SENSORS'\n    };\n    _this.locationAuthorizationMode = {\n      ALWAYS: 'always',\n      WHEN_IN_USE: 'when_in_use'\n    };\n    _this.permissionGroups = {\n      CALENDAR: ['READ_CALENDAR', 'WRITE_CALENDAR'],\n      CAMERA: ['CAMERA'],\n      CONTACTS: ['READ_CONTACTS', 'WRITE_CONTACTS', 'GET_ACCOUNTS'],\n      LOCATION: ['ACCESS_FINE_LOCATION', 'ACCESS_COARSE_LOCATION'],\n      MICROPHONE: ['RECORD_AUDIO'],\n      PHONE: ['READ_PHONE_STATE', 'CALL_PHONE', 'ADD_VOICEMAIL', 'USE_SIP', 'PROCESS_OUTGOING_CALLS', 'READ_CALL_LOG', 'WRITE_CALL_LOG'],\n      SENSORS: ['BODY_SENSORS'],\n      SMS: ['SEND_SMS', 'RECEIVE_SMS', 'READ_SMS', 'RECEIVE_WAP_PUSH', 'RECEIVE_MMS'],\n      STORAGE: ['READ_EXTERNAL_STORAGE', 'WRITE_EXTERNAL_STORAGE']\n    };\n    _this.locationMode = {\n      HIGH_ACCURACY: 'high_accuracy',\n      DEVICE_ONLY: 'device_only',\n      BATTERY_SAVING: 'battery_saving',\n      LOCATION_OFF: 'location_off'\n    };\n    _this.bluetoothState = {\n      UNKNOWN: 'unknown',\n      RESETTING: 'resetting',\n      UNSUPPORTED: 'unsupported',\n      UNAUTHORIZED: 'unauthorized',\n      POWERED_OFF: 'powered_off',\n      POWERED_ON: 'powered_on',\n      POWERING_OFF: 'powering_off',\n      POWERING_ON: 'powering_on'\n    };\n    return _this;\n  }\n\n  Diagnostic.prototype.isLocationAvailable = function () {\n    return cordova(this, \"isLocationAvailable\", {}, arguments);\n  };\n\n  Diagnostic.prototype.isWifiAvailable = function () {\n    return cordova(this, \"isWifiAvailable\", {}, arguments);\n  };\n\n  Diagnostic.prototype.isCameraAvailable = function (externalStorage) {\n    return cordova(this, \"isCameraAvailable\", {\n      \"callbackOrder\": \"reverse\"\n    }, arguments);\n  };\n\n  Diagnostic.prototype.isBluetoothAvailable = function () {\n    return cordova(this, \"isBluetoothAvailable\", {}, arguments);\n  };\n\n  Diagnostic.prototype.switchToLocationSettings = function () {\n    return cordova(this, \"switchToLocationSettings\", {\n      \"sync\": true,\n      \"platforms\": [\"Android\", \"Windows 10\", \"iOS\"]\n    }, arguments);\n  };\n\n  Diagnostic.prototype.switchToMobileDataSettings = function () {\n    return cordova(this, \"switchToMobileDataSettings\", {\n      \"sync\": true,\n      \"platforms\": [\"Android\", \"Windows 10\"]\n    }, arguments);\n  };\n\n  Diagnostic.prototype.switchToBluetoothSettings = function () {\n    return cordova(this, \"switchToBluetoothSettings\", {\n      \"sync\": true,\n      \"platforms\": [\"Android\", \"Windows 10\"]\n    }, arguments);\n  };\n\n  Diagnostic.prototype.switchToWifiSettings = function () {\n    return cordova(this, \"switchToWifiSettings\", {\n      \"sync\": true,\n      \"platforms\": [\"Android\", \"Windows 10\"]\n    }, arguments);\n  };\n\n  Diagnostic.prototype.isWifiEnabled = function () {\n    return cordova(this, \"isWifiEnabled\", {\n      \"platforms\": [\"Android\", \"Windows 10\"]\n    }, arguments);\n  };\n\n  Diagnostic.prototype.setWifiState = function (state) {\n    return cordova(this, \"setWifiState\", {\n      \"callbackOrder\": \"reverse\",\n      \"platforms\": [\"Android\", \"Windows 10\"]\n    }, arguments);\n  };\n\n  Diagnostic.prototype.setBluetoothState = function (state) {\n    return cordova(this, \"setBluetoothState\", {\n      \"callbackOrder\": \"reverse\",\n      \"platforms\": [\"Android\", \"Windows 10\"]\n    }, arguments);\n  };\n\n  Diagnostic.prototype.isLocationEnabled = function () {\n    return cordova(this, \"isLocationEnabled\", {\n      \"platforms\": [\"Android\", \"iOS\"]\n    }, arguments);\n  };\n\n  Diagnostic.prototype.isLocationAuthorized = function () {\n    return cordova(this, \"isLocationAuthorized\", {}, arguments);\n  };\n\n  Diagnostic.prototype.getLocationAuthorizationStatus = function () {\n    return cordova(this, \"getLocationAuthorizationStatus\", {\n      \"platforms\": [\"Android\", \"iOS\"]\n    }, arguments);\n  };\n\n  Diagnostic.prototype.requestLocationAuthorization = function (mode) {\n    return cordova(this, \"requestLocationAuthorization\", {\n      \"platforms\": [\"Android\", \"iOS\"],\n      \"callbackOrder\": \"reverse\"\n    }, arguments);\n  };\n\n  Diagnostic.prototype.isCameraPresent = function () {\n    return cordova(this, \"isCameraPresent\", {\n      \"platforms\": [\"Android\", \"iOS\"]\n    }, arguments);\n  };\n\n  Diagnostic.prototype.isCameraAuthorized = function (externalStorage) {\n    return cordova(this, \"isCameraAuthorized\", {\n      \"platforms\": [\"Android\", \"iOS\"],\n      \"callbackOrder\": \"reverse\"\n    }, arguments);\n  };\n\n  Diagnostic.prototype.getCameraAuthorizationStatus = function (externalStorage) {\n    return cordova(this, \"getCameraAuthorizationStatus\", {\n      \"platforms\": [\"Android\", \"iOS\"],\n      \"callbackOrder\": \"reverse\"\n    }, arguments);\n  };\n\n  Diagnostic.prototype.requestCameraAuthorization = function (externalStorage) {\n    return cordova(this, \"requestCameraAuthorization\", {\n      \"platforms\": [\"Android\", \"iOS\"],\n      \"callbackOrder\": \"reverse\"\n    }, arguments);\n  };\n\n  Diagnostic.prototype.isMicrophoneAuthorized = function () {\n    return cordova(this, \"isMicrophoneAuthorized\", {\n      \"platforms\": [\"Android\", \"iOS\"]\n    }, arguments);\n  };\n\n  Diagnostic.prototype.getMicrophoneAuthorizationStatus = function () {\n    return cordova(this, \"getMicrophoneAuthorizationStatus\", {\n      \"platforms\": [\"Android\", \"iOS\"]\n    }, arguments);\n  };\n\n  Diagnostic.prototype.requestMicrophoneAuthorization = function () {\n    return cordova(this, \"requestMicrophoneAuthorization\", {\n      \"platforms\": [\"Android\", \"iOS\"]\n    }, arguments);\n  };\n\n  Diagnostic.prototype.isContactsAuthorized = function () {\n    return cordova(this, \"isContactsAuthorized\", {\n      \"platforms\": [\"Android\", \"iOS\"]\n    }, arguments);\n  };\n\n  Diagnostic.prototype.getContactsAuthorizationStatus = function () {\n    return cordova(this, \"getContactsAuthorizationStatus\", {\n      \"platforms\": [\"Android\", \"iOS\"]\n    }, arguments);\n  };\n\n  Diagnostic.prototype.requestContactsAuthorization = function () {\n    return cordova(this, \"requestContactsAuthorization\", {\n      \"platforms\": [\"Android\", \"iOS\"]\n    }, arguments);\n  };\n\n  Diagnostic.prototype.isCalendarAuthorized = function () {\n    return cordova(this, \"isCalendarAuthorized\", {\n      \"platforms\": [\"Android\", \"iOS\"]\n    }, arguments);\n  };\n\n  Diagnostic.prototype.getCalendarAuthorizationStatus = function () {\n    return cordova(this, \"getCalendarAuthorizationStatus\", {\n      \"platforms\": [\"Android\", \"iOS\"]\n    }, arguments);\n  };\n\n  Diagnostic.prototype.requestCalendarAuthorization = function () {\n    return cordova(this, \"requestCalendarAuthorization\", {\n      \"platforms\": [\"Android\", \"iOS\"]\n    }, arguments);\n  };\n\n  Diagnostic.prototype.switchToSettings = function () {\n    return cordova(this, \"switchToSettings\", {\n      \"platforms\": [\"Android\", \"iOS\"]\n    }, arguments);\n  };\n\n  Diagnostic.prototype.getBluetoothState = function () {\n    return cordova(this, \"getBluetoothState\", {\n      \"platforms\": [\"Android\", \"iOS\"]\n    }, arguments);\n  };\n\n  Diagnostic.prototype.registerBluetoothStateChangeHandler = function (handler) {\n    return cordova(this, \"registerBluetoothStateChangeHandler\", {\n      \"platforms\": [\"Android\", \"iOS\"],\n      \"sync\": true\n    }, arguments);\n  };\n\n  Diagnostic.prototype.registerLocationStateChangeHandler = function (handler) {\n    return cordova(this, \"registerLocationStateChangeHandler\", {\n      \"platforms\": [\"Android\", \"iOS\"],\n      \"sync\": true\n    }, arguments);\n  };\n\n  Diagnostic.prototype.isGpsLocationAvailable = function () {\n    return cordova(this, \"isGpsLocationAvailable\", {\n      \"platforms\": [\"Android\"]\n    }, arguments);\n  };\n\n  Diagnostic.prototype.isGpsLocationEnabled = function () {\n    return cordova(this, \"isGpsLocationEnabled\", {\n      \"platforms\": [\"Android\"]\n    }, arguments);\n  };\n\n  Diagnostic.prototype.isNetworkLocationAvailable = function () {\n    return cordova(this, \"isNetworkLocationAvailable\", {\n      \"platforms\": [\"Android\"]\n    }, arguments);\n  };\n\n  Diagnostic.prototype.isNetworkLocationEnabled = function () {\n    return cordova(this, \"isNetworkLocationEnabled\", {\n      \"platforms\": [\"Android\"]\n    }, arguments);\n  };\n\n  Diagnostic.prototype.getLocationMode = function () {\n    return cordova(this, \"getLocationMode\", {\n      \"platforms\": [\"Android\"]\n    }, arguments);\n  };\n\n  Diagnostic.prototype.getPermissionAuthorizationStatus = function (permission) {\n    return cordova(this, \"getPermissionAuthorizationStatus\", {\n      \"platforms\": [\"Android\"],\n      \"callbackOrder\": \"reverse\"\n    }, arguments);\n  };\n\n  Diagnostic.prototype.getPermissionsAuthorizationStatus = function (permissions) {\n    return cordova(this, \"getPermissionsAuthorizationStatus\", {\n      \"platforms\": [\"Android\"],\n      \"callbackOrder\": \"reverse\"\n    }, arguments);\n  };\n\n  Diagnostic.prototype.requestRuntimePermission = function (permission) {\n    return cordova(this, \"requestRuntimePermission\", {\n      \"platforms\": [\"Android\"],\n      \"callbackOrder\": \"reverse\"\n    }, arguments);\n  };\n\n  Diagnostic.prototype.requestRuntimePermissions = function (permissions) {\n    return cordova(this, \"requestRuntimePermissions\", {\n      \"platforms\": [\"Android\"],\n      \"callbackOrder\": \"reverse\"\n    }, arguments);\n  };\n\n  Diagnostic.prototype.isRequestingPermission = function () {\n    return cordova(this, \"isRequestingPermission\", {\n      \"sync\": true\n    }, arguments);\n  };\n\n  Diagnostic.prototype.registerPermissionRequestCompleteHandler = function (handler) {\n    return cordova(this, \"registerPermissionRequestCompleteHandler\", {\n      \"sync\": true\n    }, arguments);\n  };\n\n  Diagnostic.prototype.isBluetoothEnabled = function () {\n    return cordova(this, \"isBluetoothEnabled\", {\n      \"platforms\": [\"Android\"]\n    }, arguments);\n  };\n\n  Diagnostic.prototype.hasBluetoothSupport = function () {\n    return cordova(this, \"hasBluetoothSupport\", {\n      \"platforms\": [\"Android\"]\n    }, arguments);\n  };\n\n  Diagnostic.prototype.hasBluetoothLESupport = function () {\n    return cordova(this, \"hasBluetoothLESupport\", {\n      \"platforms\": [\"Android\"]\n    }, arguments);\n  };\n\n  Diagnostic.prototype.hasBluetoothLEPeripheralSupport = function () {\n    return cordova(this, \"hasBluetoothLEPeripheralSupport\", {\n      \"platforms\": [\"Android\"]\n    }, arguments);\n  };\n\n  Diagnostic.prototype.isExternalStorageAuthorized = function () {\n    return cordova(this, \"isExternalStorageAuthorized\", {\n      \"platforms\": [\"Android\"]\n    }, arguments);\n  };\n\n  Diagnostic.prototype.getExternalStorageAuthorizationStatus = function () {\n    return cordova(this, \"getExternalStorageAuthorizationStatus\", {\n      \"platforms\": [\"Android\"]\n    }, arguments);\n  };\n\n  Diagnostic.prototype.requestExternalStorageAuthorization = function () {\n    return cordova(this, \"requestExternalStorageAuthorization\", {\n      \"platforms\": [\"Android\"]\n    }, arguments);\n  };\n\n  Diagnostic.prototype.getExternalSdCardDetails = function () {\n    return cordova(this, \"getExternalSdCardDetails\", {\n      \"platforms\": [\"Android\"]\n    }, arguments);\n  };\n\n  Diagnostic.prototype.switchToWirelessSettings = function () {\n    return cordova(this, \"switchToWirelessSettings\", {\n      \"platforms\": [\"Android\"],\n      \"sync\": true\n    }, arguments);\n  };\n\n  Diagnostic.prototype.switchToNFCSettings = function () {\n    return cordova(this, \"switchToNFCSettings\", {\n      \"platforms\": [\"Android\"],\n      \"sync\": true\n    }, arguments);\n  };\n\n  Diagnostic.prototype.isNFCPresent = function () {\n    return cordova(this, \"isNFCPresent\", {\n      \"platforms\": [\"Android\"]\n    }, arguments);\n  };\n\n  Diagnostic.prototype.isNFCEnabled = function () {\n    return cordova(this, \"isNFCEnabled\", {\n      \"platforms\": [\"Android\"]\n    }, arguments);\n  };\n\n  Diagnostic.prototype.isNFCAvailable = function () {\n    return cordova(this, \"isNFCAvailable\", {\n      \"platforms\": [\"Android\"]\n    }, arguments);\n  };\n\n  Diagnostic.prototype.registerNFCStateChangeHandler = function (handler) {\n    return cordova(this, \"registerNFCStateChangeHandler\", {\n      \"platforms\": [\"Android\"],\n      \"sync\": true\n    }, arguments);\n  };\n\n  Diagnostic.prototype.isDataRoamingEnabled = function () {\n    return cordova(this, \"isDataRoamingEnabled\", {\n      \"platforms\": [\"Android\"]\n    }, arguments);\n  };\n\n  Diagnostic.prototype.isADBModeEnabled = function () {\n    return cordova(this, \"isADBModeEnabled\", {\n      \"platforms\": [\"Android\"]\n    }, arguments);\n  };\n\n  Diagnostic.prototype.isDeviceRooted = function () {\n    return cordova(this, \"isDeviceRooted\", {\n      \"platforms\": [\"Android\"]\n    }, arguments);\n  };\n\n  Diagnostic.prototype.isCameraRollAuthorized = function () {\n    return cordova(this, \"isCameraRollAuthorized\", {\n      \"platforms\": [\"iOS\"]\n    }, arguments);\n  };\n\n  Diagnostic.prototype.getCameraRollAuthorizationStatus = function () {\n    return cordova(this, \"getCameraRollAuthorizationStatus\", {\n      \"platforms\": [\"iOS\"]\n    }, arguments);\n  };\n\n  Diagnostic.prototype.requestCameraRollAuthorization = function () {\n    return cordova(this, \"requestCameraRollAuthorization\", {\n      \"platforms\": [\"iOS\"]\n    }, arguments);\n  };\n\n  Diagnostic.prototype.isRemoteNotificationsEnabled = function () {\n    return cordova(this, \"isRemoteNotificationsEnabled\", {\n      \"platforms\": [\"iOS\", \"Android\"]\n    }, arguments);\n  };\n\n  Diagnostic.prototype.isRegisteredForRemoteNotifications = function () {\n    return cordova(this, \"isRegisteredForRemoteNotifications\", {\n      \"platforms\": [\"iOS\"]\n    }, arguments);\n  };\n\n  Diagnostic.prototype.getRemoteNotificationsAuthorizationStatus = function () {\n    return cordova(this, \"getRemoteNotificationsAuthorizationStatus\", {\n      \"platforms\": [\"iOS\"]\n    }, arguments);\n  };\n\n  Diagnostic.prototype.requestRemoteNotificationsAuthorization = function (types, omitRegistration) {\n    return cordova(this, \"requestRemoteNotificationsAuthorization\", {\n      \"platforms\": [\"iOS\"]\n    }, arguments);\n  };\n\n  Diagnostic.prototype.getRemoteNotificationTypes = function () {\n    return cordova(this, \"getRemoteNotificationTypes\", {\n      \"platforms\": [\"iOS\"]\n    }, arguments);\n  };\n\n  Diagnostic.prototype.isRemindersAuthorized = function () {\n    return cordova(this, \"isRemindersAuthorized\", {\n      \"platforms\": [\"iOS\"]\n    }, arguments);\n  };\n\n  Diagnostic.prototype.getRemindersAuthorizationStatus = function () {\n    return cordova(this, \"getRemindersAuthorizationStatus\", {\n      \"platforms\": [\"iOS\"]\n    }, arguments);\n  };\n\n  Diagnostic.prototype.requestRemindersAuthorization = function () {\n    return cordova(this, \"requestRemindersAuthorization\", {\n      \"platforms\": [\"iOS\"]\n    }, arguments);\n  };\n\n  Diagnostic.prototype.isBackgroundRefreshAuthorized = function () {\n    return cordova(this, \"isBackgroundRefreshAuthorized\", {\n      \"platforms\": [\"iOS\"]\n    }, arguments);\n  };\n\n  Diagnostic.prototype.getBackgroundRefreshStatus = function () {\n    return cordova(this, \"getBackgroundRefreshStatus\", {\n      \"platforms\": [\"iOS\"]\n    }, arguments);\n  };\n\n  Diagnostic.prototype.requestBluetoothAuthorization = function () {\n    return cordova(this, \"requestBluetoothAuthorization\", {\n      \"platforms\": [\"iOS\"]\n    }, arguments);\n  };\n\n  Diagnostic.prototype.isMotionAvailable = function () {\n    return cordova(this, \"isMotionAvailable\", {\n      \"platforms\": [\"iOS\"]\n    }, arguments);\n  };\n\n  Diagnostic.prototype.isMotionRequestOutcomeAvailable = function () {\n    return cordova(this, \"isMotionRequestOutcomeAvailable\", {\n      \"platforms\": [\"iOS\"]\n    }, arguments);\n  };\n\n  Diagnostic.prototype.requestMotionAuthorization = function () {\n    return cordova(this, \"requestMotionAuthorization\", {\n      \"platforms\": [\"iOS\"]\n    }, arguments);\n  };\n\n  Diagnostic.prototype.getMotionAuthorizationStatus = function () {\n    return cordova(this, \"getMotionAuthorizationStatus\", {\n      \"platforms\": [\"iOS\"]\n    }, arguments);\n  };\n\n  Diagnostic.prototype.getLocationAccuracyAuthorization = function () {\n    return cordova(this, \"getLocationAccuracyAuthorization\", {\n      \"platform\": [\"iOS\"]\n    }, arguments);\n  };\n\n  Diagnostic.prototype.requestTemporaryFullAccuracyAuthorization = function (purpose) {\n    return cordova(this, \"requestTemporaryFullAccuracyAuthorization\", {\n      \"platforms\": [\"iOS\"]\n    }, arguments);\n  };\n\n  Diagnostic.prototype.registerLocationAccuracyAuthorizationChangeHandler = function (handler) {\n    return cordova(this, \"registerLocationAccuracyAuthorizationChangeHandler\", {\n      \"platforms\": [\"iOS\"],\n      \"sync\": true\n    }, arguments);\n  };\n\n  Object.defineProperty(Diagnostic.prototype, \"permissionStatus\", {\n    get: function () {\n      return cordovaPropertyGet(this, \"permissionStatus\");\n    },\n    set: function (value) {\n      cordovaPropertySet(this, \"permissionStatus\", value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Diagnostic.prototype, \"NFCState\", {\n    get: function () {\n      return cordovaPropertyGet(this, \"NFCState\");\n    },\n    set: function (value) {\n      cordovaPropertySet(this, \"NFCState\", value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Diagnostic.prototype, \"motionStatus\", {\n    get: function () {\n      return cordovaPropertyGet(this, \"motionStatus\");\n    },\n    set: function (value) {\n      cordovaPropertySet(this, \"motionStatus\", value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Diagnostic.pluginName = \"Diagnostic\";\n  Diagnostic.plugin = \"cordova.plugins.diagnostic\";\n  Diagnostic.pluginRef = \"cordova.plugins.diagnostic\";\n  Diagnostic.repo = \"https://github.com/dpa99c/cordova-diagnostic-plugin\";\n  Diagnostic.platforms = [\"Android\", \"iOS\", \"Windows\"];\n\n  Diagnostic.Éµfac = /*@__PURE__*/function () {\n    var ÉµDiagnostic_BaseFactory;\n    return function Diagnostic_Factory(t) {\n      return (ÉµDiagnostic_BaseFactory || (ÉµDiagnostic_BaseFactory = Éµngcc0.ÉµÉµgetInheritedFactory(Diagnostic)))(t || Diagnostic);\n    };\n  }();\n\n  Diagnostic.Éµprov = /*@__PURE__*/Éµngcc0.ÉµÉµdefineInjectable({\n    token: Diagnostic,\n    factory: function (t) {\n      return Diagnostic.Éµfac(t);\n    }\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return Diagnostic;\n}(IonicNativePlugin);\n\nexport { Diagnostic }; //# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":null,"metadata":{},"sourceType":"module"}