{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { HttpHeaders } from '@angular/common/http';\nimport { from, throwError } from 'rxjs';\nimport { APP_CONFIG, URLS } from 'src/assets/constant';\nimport { catchError, mergeMap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@ionic/angular\";\nimport * as i3 from \"../services/local-storage.service\";\nimport * as i4 from \"@ionic-native/in-app-browser/ngx\";\nimport * as i5 from \"@ionic-native/device/ngx\";\nimport * as i6 from \"@ionic-native/fcm/ngx\";\nimport * as i7 from \"../services/data-transfer.service\";\nimport * as i8 from \"@angular/router\";\nexport let ApiService = /*#__PURE__*/(() => {\n  class ApiService {\n    constructor(http, loadingCtrl, toastController, localStorage, iab, alertController, device_id, platform, fcm, sendData, router) {\n      this.http = http;\n      this.loadingCtrl = loadingCtrl;\n      this.toastController = toastController;\n      this.localStorage = localStorage;\n      this.iab = iab;\n      this.alertController = alertController;\n      this.device_id = device_id;\n      this.platform = platform;\n      this.fcm = fcm;\n      this.sendData = sendData;\n      this.router = router;\n      this.fcmGenerationRetryCount = 0;\n      this.options = {\n        location: 'yes',\n        hidden: 'no',\n        clearcache: 'yes',\n        clearsessioncache: 'yes',\n        zoom: 'yes',\n        hardwareback: 'yes',\n        mediaPlaybackRequiresUserAction: 'no',\n        shouldPauseOnSuspend: 'no',\n        closebuttoncaption: 'Close',\n        disallowoverscroll: 'no',\n        toolbar: 'yes',\n        enableViewportScale: 'no',\n        allowInlineMediaPlayback: 'no',\n        presentationstyle: 'pagesheet',\n        fullscreen: 'yes' //Windows only\n\n      };\n      this.forceUpdateCount = 1;\n      this.pushIsinBackground = false;\n    }\n\n    get device() {\n      if (this.platform.is(\"ios\")) {\n        return \"3\";\n      } else if (this.platform.is(\"android\")) {\n        return \"2\";\n      } else {\n        return \"4\"; // return \"2\";\n      }\n    }\n\n    apiCallWithLoginToken(url, data) {\n      console.log(\"22url==\", url);\n      return from(this.localStorage.getStorage()).pipe(mergeMap(storedData => {\n        console.log(\"Shivanshi local storage data==\", storedData);\n        data[\"client_id\"] = APP_CONFIG.clientId;\n        data[\"device\"] = this.device;\n        data[\"app_version\"] = APP_CONFIG.app_version;\n        data[\"device_id\"] = storedData.deviceId;\n        var loginToken;\n\n        if (storedData && storedData.allStoreData) {\n          console.log(\"Shivanshi allStoreData==\", storedData.allStoreData);\n          data[\"employee_id\"] = storedData.allStoreData.user_id;\n          data[\"user_type\"] = storedData.allStoreData.employee_type;\n          loginToken = storedData.allStoreData.login_token;\n          console.log('Shivanshi login token', loginToken);\n        } else {\n          loginToken = \"\";\n          console.log('login token response', loginToken);\n        }\n\n        var httpOptions = {\n          headers: new HttpHeaders({\n            \"Content-Type\": \"application/json\",\n            Authorization: loginToken\n          })\n        };\n        console.log('Shivanshi request options', httpOptions);\n        console.log('Shivanshi request url', URLS.baseUrl + url);\n        console.log('Shivanshi request data', data);\n        return this.http.post(URLS.baseUrl + url, data, httpOptions).pipe(catchError(this.handleError));\n      }));\n    }\n\n    handleError(error) {\n      if (error.error instanceof ErrorEvent) {\n        // A client-side or network error occurred. Handle it accordingly.\n        console.error(\"An error occurred:\", error.error.message);\n      } else {\n        // The backend returned an unsuccessful response code.\n        // The response body may contain clues as to what went wrong,\n        console.error(`Backend returned code ${error.status}, ` + `body was: ${error.error}`);\n      } // return an observable with a user-facing error message\n\n\n      return throwError(\"Something bad happened, please try again later.\");\n    }\n\n    showToastMessage(msg, pos, time, bgClassName) {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (msg == '') {} else {\n          console.log(\"toastMessage color==\", bgClassName);\n          const toast = yield this.toastController.create({\n            message: msg,\n            position: pos,\n            duration: time,\n            cssClass: bgClassName\n          });\n          toast.present();\n        }\n      });\n    }\n\n    presentLoadingDefault() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.loading = yield this.loadingCtrl.create({\n          message: '',\n          cssClass: 'loader-waiting',\n          duration: 2000\n        });\n        yield this.loading.present(); // const { role, data } = await loading.onDidDismiss();\n        // console.log('Loading dismissed!');\n      });\n    }\n\n    generateDeviceId() {\n      if (this.platform.is(\"cordova\")) {\n        console.log(\"call FCM /DeviceId 12\");\n        let deviceUuid = this.device_id.uuid;\n        this.deviceId = deviceUuid == null ? \"browser\" : deviceUuid;\n\n        if (this.deviceId == \"browser\") {\n          let deviceUuid = this.device_id.uuid;\n          this.deviceId = deviceUuid == null ? \"browser\" : deviceUuid;\n\n          if (this.deviceId == \"browser\") {\n            let deviceUuid = this.device_id.uuid;\n            this.deviceId = deviceUuid == null ? \"browser\" : deviceUuid;\n            this.localStorage.setStorage('deviceId', this.deviceId);\n          } else {\n            this.localStorage.setStorage('deviceId', this.deviceId);\n          }\n        } else {\n          this.localStorage.setStorage('deviceId', this.deviceId);\n        }\n      } else {\n        console.log(\"call FCM /DeviceId 123\");\n        this.localStorage.setStorage('deviceId', 'PWA');\n      }\n    }\n\n    presentLoadingClose() {\n      return __awaiter(this, void 0, void 0, function* () {\n        yield this.loading.dismiss(); // console.log('Loading dismissed!');\n        // await this.loading.getTop().then(loader => {\n        //   if (loader) {\n        //     loader.dismiss();\n        //   }\n        // });\n      });\n    } //for media file\n\n\n    mediaFileUpload(url, formData) {\n      return from(this.localStorage.getStorage()).pipe(mergeMap(storedData => {\n        console.log(\"storedData\", storedData);\n        formData.append('client_id', APP_CONFIG.clientId);\n        formData.append('device', this.device);\n        formData.append('device_id', storedData.deviceId);\n        formData.append('app_version', APP_CONFIG.app_version);\n        formData.append('employee_id', storedData.allStoreData.user_id);\n        formData.append('user_type', storedData.allStoreData.employee_type);\n        return this.http.post(URLS.baseUrl + url, formData, {\n          reportProgress: true,\n          observe: 'events'\n        });\n      }));\n    }\n\n    generateFCMToken() {\n      return __awaiter(this, void 0, void 0, function* () {\n        let that = this;\n        this.platform.ready().then(() => {\n          console.log(\"call FCM Function==\");\n\n          if (this.platform.is(\"cordova\")) {\n            that.fcm.subscribeToTopic('Mehta');\n            console.log(\"call FCM and get token0.0==\");\n            console.log(\"call FCM platform==\", that.platform);\n            that.fcm.onNotification().subscribe(data => {\n              console.log(\"data receive from server call FCM == \", data);\n\n              if (data.wasTapped) {\n                console.log(\"Received in background\");\n                that.pushIsinBackground = true;\n                setTimeout(() => {\n                  that.checkcondition(data);\n                }, 3000);\n                console.log(\"call FCM Received in background==\", data);\n              } else {\n                console.log(\"Received in foreground\");\n                console.log(\"call FCM Received in foreground==\", data);\n\n                if (that.platform.is('ios')) {\n                  that.pushAlertView(data.aps.alert.title, data.aps.alert.body, data);\n                } else {\n                  // that.pushAlertView(data.title+' '+'New Notification', data.body, data);\n                  that.pushAlertView(data.title, data.body, data);\n                }\n              }\n\n              ;\n              that.fcm.unsubscribeFromTopic('Mehta');\n            });\n            this.fcm.getToken().then(token => {\n              console.log(\"call FCM and get token0==\", token);\n\n              if (token) {\n                this.fcmToken = token;\n                console.log(\"call FCM If Token==\", this.fcmToken);\n                setTimeout(() => {\n                  this.localStorage.setStorage('fcmToken', this.fcmToken);\n                }, 1000); // this.storage.set('fcmToken', this.fcmToken);\n              } else {\n                console.log(\"call FCM else Token==\", token);\n\n                if (this.fcmGenerationRetryCount <= 2) {\n                  this.generateFCMToken();\n                  this.fcmGenerationRetryCount = this.fcmGenerationRetryCount + 1;\n                }\n              }\n            });\n            console.log(\"call FCM and get token1.1==\");\n            this.fcm.onTokenRefresh().subscribe(token => {\n              console.log(\"call FCM and get token1==\", token);\n            });\n          } else {\n            let fcmDummyToken = \"PWA\";\n            setTimeout(() => {\n              this.localStorage.setStorage('fcmToken', fcmDummyToken);\n            }, 1000); // this.storage.set('fcmToken', this.fcmToken);\n\n            console.log(\"call FCM static FCM Token==\", fcmDummyToken);\n          }\n        });\n      });\n    }\n\n    pushAlertView(pushTitle, pushMessage, pushData) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const alert = yield this.alertController.create({\n          cssClass: 'my-custom-class',\n          header: pushTitle,\n          message: pushMessage,\n          backdropDismiss: false,\n          buttons: [{\n            text: 'Ignore',\n            role: 'cancel',\n            cssClass: 'secondary',\n            handler: blah => {\n              console.log(\"call FCM cancel/Ignore Push Alert==\", blah);\n            }\n          }, {\n            text: 'View',\n            handler: () => {\n              console.log(\"call FCM View/Redirect Push Alert==\", pushData);\n              this.checkcondition(pushData);\n            }\n          }]\n        });\n        yield alert.present();\n      });\n    }\n\n    checkcondition(pushAllData) {\n      console.log(\"call FCM push redirection data==\", pushAllData);\n      console.log(\"call FCM checkConditionData 12==\", pushAllData);\n      this.sendData.alldata = pushAllData; // this data transfer use for \"notice-detail\", \"hr-policy-detail\"\n\n      this.sendData.myParam = pushAllData; // this data transfer use for \"communication-detail\", \"say-cheers-detail\"\n\n      this.router.navigate([pushAllData.redirect_page]);\n\n      if (this.pushIsinBackground == true) {\n        //hide loader in case of backfround push\n        console.log(\"call FCM App Position in background==\", this.pushIsinBackground); // this.hideLoader();\n      } else {\n        console.log(\"call FCM App Position in foreground==\", this.pushIsinBackground);\n      }\n    }\n\n  }\n\n  ApiService.ɵfac = function ApiService_Factory(t) {\n    return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.LoadingController), i0.ɵɵinject(i2.ToastController), i0.ɵɵinject(i3.LocalStorageService), i0.ɵɵinject(i4.InAppBrowser), i0.ɵɵinject(i2.AlertController), i0.ɵɵinject(i5.Device), i0.ɵɵinject(i2.Platform), i0.ɵɵinject(i6.FCM), i0.ɵɵinject(i7.DataTransferService), i0.ɵɵinject(i8.Router));\n  };\n\n  ApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ApiService,\n    factory: ApiService.ɵfac,\n    providedIn: 'root'\n  });\n  return ApiService;\n})();","map":null,"metadata":{},"sourceType":"module"}