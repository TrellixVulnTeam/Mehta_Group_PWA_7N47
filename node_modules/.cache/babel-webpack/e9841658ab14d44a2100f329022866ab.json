{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { URLS } from 'src/assets/constant';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic-native/geolocation/ngx\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@ionic/angular\";\nimport * as i4 from \"@ionic-native/native-geocoder/ngx\";\nimport * as i5 from \"src/app/provider/api.service\";\nimport * as i6 from \"src/app/services/data-transfer.service\";\nimport * as i7 from \"@angular/common\";\n\nfunction GeolocationPage_div_26_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"ion-row\");\n    i0.ɵɵelementStart(2, \"ion-col\");\n    i0.ɵɵelementStart(3, \"p\");\n    i0.ɵɵtext(4, \"Your Location\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"ion-row\");\n    i0.ɵɵelementStart(6, \"ion-col\", 18);\n    i0.ɵɵelement(7, \"ion-icon\", 19);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"ion-col\", 20);\n    i0.ɵɵtext(9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(9);\n    i0.ɵɵtextInterpolate(ctx_r0.loc);\n  }\n}\n\nconst _c0 = function (a0) {\n  return {\n    \"content-bg\": a0\n  };\n};\n\nconst _c1 = function (a0) {\n  return {\n    \"boundary1\": a0\n  };\n};\n\nconst _c2 = function (a0) {\n  return {\n    \"banner\": a0\n  };\n};\n\nexport let GeolocationPage = /*#__PURE__*/(() => {\n  class GeolocationPage {\n    constructor(zone, geolocation, route, platform, nativeGeocoder, apiService, sendData) {\n      this.zone = zone;\n      this.geolocation = geolocation;\n      this.route = route;\n      this.platform = platform;\n      this.nativeGeocoder = nativeGeocoder;\n      this.apiService = apiService;\n      this.sendData = sendData;\n      this.profileAddCustomer = this.sendData.alldata;\n\n      if (this.profileAddCustomer) {\n        this.requestID = this.profileAddCustomer.requestFor, this.requestIDPage = this.profileAddCustomer.requestPage;\n      } else {\n        this.requestID = '';\n        this.requestIDPage = '';\n      }\n\n      platform.ready().then(() => {\n        console.log('Width: ' + platform.width());\n        console.log('Height: ' + platform.height());\n      });\n    }\n\n    ngOnInit() {}\n\n    getLocationFun() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.apiService.presentLoadingDefault();\n        this.zone.run(() => __awaiter(this, void 0, void 0, function* () {\n          this.loc = '';\n          console.log('curr_pos4');\n          let curr_pos = yield this.geolocation.getCurrentPosition();\n          console.log('curr_pos', curr_pos.coords.latitude);\n          console.log('curr_pos', curr_pos.coords.longitude); // if (this.platform.is('cordova')) {\n          //   let options: NativeGeocoderOptions = {\n          //     useLocale: true,\n          //     maxResults: 5\n          //   };\n          //   this.nativeGeocoder.reverseGeocode(curr_pos.coords.latitude, curr_pos.coords.longitude, options)\n          //     .then((result: any) => {\n          //       this.apiService.presentLoadingClose();\n          //       console.log(result);\n          //       this.lat = curr_pos.coords.latitude;\n          //       this.lng = curr_pos.coords.longitude;\n          //       this.userLocation = result[0]\n          //       console.log(this.userLocation);\n          //       console.log(\"loc: \", this.userLocation[0]);\n          //     })\n          //     .catch((error: any) => console.log(error));\n          // }else{\n\n          this.getGeoLocation(curr_pos.coords.latitude, curr_pos.coords.longitude); // }\n          // if (this.platform.is('cordova')) {\n          //   let options: NativeGeocoderOptions = {\n          //     useLocale: true,\n          //     maxResults: 5\n          //   };\n          //   let nativeGeocoder_res=await this.nativeGeocoder.reverseGeocode(curr_pos.coords.latitude, curr_pos.coords.longitude, options);\n          //   console.log('nativeGeocoder_res==> ', nativeGeocoder_res);\n          //   // console.log('nativeGeocoder_res==> ', nativeGeocoder_res);\n          //   // console.log('nativeGeocoder_res==> ', nativeGeocoder_res);\n          // }\n        }));\n      });\n    } // getLocationFun1(){\n    //   this.loc='';\n    //   console.log('getLocationFun clicked');\n    //   this.geolocation.getCurrentPosition().then((resp) => {\n    //     // this.getGeoLocation(resp.coords.latitude, resp.coords.longitude)\n    //     if (this.platform.is('cordova')) {\n    //       let options: NativeGeocoderOptions = {\n    //         useLocale: true,\n    //         maxResults: 5\n    //       };\n    //       this.nativeGeocoder.reverseGeocode(resp.coords.latitude, resp.coords.longitude, options)\n    //         .then((result: any) => {\n    //           console.log(result);\n    //           this.lat = resp.coords.latitude;\n    //           this.lng = resp.coords.longitude;\n    //           this.userLocation = result[0]\n    //           console.log(this.userLocation);\n    //           console.log(\"loc: \", this.userLocation[0]);\n    //         })\n    //         .catch((error: any) => console.log(error));\n    //     } else {\n    //       this.getGeoLocation(resp.coords.latitude, resp.coords.longitude)\n    //     }\n    //   }).catch((error) => { \n    //     console.log(\"getLocationFun error:=> \", this.userLocation[0]);\n    //   });\n    //   let watch = this.geolocation.watchPosition();\n    //   watch.subscribe((data) => {\n    //     console.log(\"getLocationFun watch.subscribe:=> \",data);\n    //     // data can be a set of coordinates, or an error (if an error occurred).\n    //     // data.coords.latitude\n    //     // data.coords.longitude\n    //     let options: NativeGeocoderOptions = {\n    //       useLocale: true,\n    //       maxResults: 5\n    //     };\n    //     if (this.platform.is('cordova')) {\n    //       let options: NativeGeocoderOptions = {\n    //         useLocale: true,\n    //         maxResults: 5\n    //       };\n    //       this.nativeGeocoder.reverseGeocode(data['coords']['latitude'], data['coords']['longitude'], options)\n    //         .then((result: NativeGeocoderResult[]) => {\n    //           console.log(result)\n    //           this.userLocation = result[0]\n    //           console.log(this.userLocation);\n    //           console.log(\"loc: \", this.userLocation[0]);\n    //         })\n    //         .catch((error: any) => console.log(error));\n    //     } else {\n    //       console.log('not cordove')\n    //       this.getGeoLocation(data['coords']['latitude'], data['coords']['longitude'])\n    //     }\n    //   });\n    // }\n\n\n    getGeoLocation(lat, lng, type) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.apiService.presentLoadingClose();\n\n        if (navigator.geolocation) {\n          console.log('lat', lat);\n          console.log('lng', lng);\n          this.lat = lat;\n          this.lng = lng;\n          let geocoder = yield new google.maps.Geocoder();\n          let latlng = yield new google.maps.LatLng(lat, lng);\n          let request = {\n            latLng: latlng\n          };\n          yield geocoder.geocode(request, (results, status) => {\n            console.log('main Array', results, status);\n\n            if (status == google.maps.GeocoderStatus.OK) {\n              let result = results[0];\n              this.userLocation = results[0];\n              console.log('current Location', results[0]);\n              console.log(\"loc: \", result['formatted_address']);\n              this.loc = result['formatted_address'];\n              this.zone.run(() => {\n                if (result != null) {\n                  this.userCity = result.formatted_address;\n\n                  if (type === 'reverseGeocode') {\n                    this.latLngResult = result.formatted_address;\n                  }\n                }\n              });\n            }\n          });\n        }\n      });\n    }\n\n    reverseGeocode(lat, lng) {\n      if (this.platform.is('cordova')) {\n        let options = {\n          useLocale: true,\n          maxResults: 5\n        };\n        this.nativeGeocoder.reverseGeocode(lat, lng, options).then(result => this.userLocationFromLatLng = result[0]).catch(error => console.log(error));\n      } else {\n        this.getGeoLocation(lat, lng, 'reverseGeocode');\n      }\n    }\n\n    forwardGeocode(address) {\n      if (this.platform.is('cordova')) {\n        let options = {\n          useLocale: true,\n          maxResults: 5\n        };\n        this.nativeGeocoder.forwardGeocode(address, options).then(result => {\n          this.zone.run(() => {\n            this.lat = result[0].latitude;\n            this.lng = result[0].longitude;\n          });\n        }).catch(error => console.log(error));\n      } else {\n        let geocoder = new google.maps.Geocoder();\n        geocoder.geocode({\n          'address': address\n        }, (results, status) => {\n          if (status == google.maps.GeocoderStatus.OK) {\n            this.zone.run(() => {\n              this.lat = results[0].geometry.location.lat();\n              this.lng = results[0].geometry.location.lng();\n            });\n          } else {\n            alert('Error - ' + results + ' & Status - ' + status);\n          }\n        });\n      }\n    } // back(){\n    //   this.sendData.alldata={'requestPage':this.profileAddCustomer.requestPage}\n    //   this.route.navigate(['./profile-upload']);\n    // }\n\n\n    next() {\n      this.zone.run(() => {\n        let apiKey = {\n          \"latitude\": this.lat,\n          \"longitude\": this.lng,\n          \"location_dump\": this.userLocation,\n          \"request_for\": this.requestID,\n          \"request_page\": this.requestIDPage\n        };\n        this.apiService.apiCallWithLoginToken(URLS.geoLocationUrl, apiKey).subscribe(result => {\n          if (result.success == 1) {\n            this.route.navigate(['/tabs']);\n          } else {\n            this.apiService.showToastMessage(result.message, 'top', 3000, 'redBg');\n          }\n        }, err => {\n          this.apiService.showToastMessage(JSON.stringify(err), 'top', 3000, 'redBg');\n        });\n      }); // this.route.navigate(['./registration']);\n    }\n\n  }\n\n  GeolocationPage.ɵfac = function GeolocationPage_Factory(t) {\n    return new (t || GeolocationPage)(i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i1.Geolocation), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.Platform), i0.ɵɵdirectiveInject(i4.NativeGeocoder), i0.ɵɵdirectiveInject(i5.ApiService), i0.ɵɵdirectiveInject(i6.DataTransferService));\n  };\n\n  GeolocationPage.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: GeolocationPage,\n    selectors: [[\"app-geolocation\"]],\n    decls: 36,\n    vars: 11,\n    consts: [[3, \"ngClass\"], [1, \"ion-justify-content-center\"], [\"size-xl\", \"6\", \"size-md\", \"8\", \"size-xs\", \"12\", 3, \"ngClass\"], [\"src\", \"assets/icon/logo.svg\", 2, \"width\", \"150px\"], [1, \"col\"], [\"src\", \"assets/icon/abc.png\", 2, \"width\", \"130px\", \"text-align\", \"right\"], [1, \"para\"], [1, \"dev\"], [\"tappable\", \"\", 3, \"click\"], [1, \"geoBox\"], [\"size\", \"1\", 1, \"autoMargin\"], [\"name\", \"locate-outline\", 1, \"geoIcon\"], [\"size\", \"11\", 1, \"autoMargin\"], [1, \"detect\", \"ion-no-margin\"], [4, \"ngIf\"], [1, \"ion-text-center\"], [\"tappable\", \"\", 1, \"ionic_btn\", 3, \"disabled\", \"click\"], [\"src\", \"assets/icon/Design 1.png\", 1, \"banner_bg\"], [\"size\", \"1\"], [\"name\", \"location-outline\"], [\"size\", \"11\"]],\n    template: function GeolocationPage_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-content\", 0);\n        i0.ɵɵelementStart(1, \"ion-row\", 1);\n        i0.ɵɵelementStart(2, \"ion-col\", 2);\n        i0.ɵɵelementStart(3, \"ion-grid\");\n        i0.ɵɵelementStart(4, \"ion-row\");\n        i0.ɵɵelementStart(5, \"ion-col\");\n        i0.ɵɵelement(6, \"img\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"ion-col\", 4);\n        i0.ɵɵelement(8, \"img\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"ion-row\");\n        i0.ɵɵelementStart(10, \"ion-col\");\n        i0.ɵɵelementStart(11, \"p\", 6);\n        i0.ɵɵelementStart(12, \"b\");\n        i0.ɵɵtext(13, \"Geo Location\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"ion-row\");\n        i0.ɵɵelementStart(15, \"ion-col\");\n        i0.ɵɵelementStart(16, \"p\", 7);\n        i0.ɵɵtext(17, \"Enable your device location \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"ion-row\", 8);\n        i0.ɵɵlistener(\"click\", function GeolocationPage_Template_ion_row_click_18_listener() {\n          return ctx.getLocationFun();\n        });\n        i0.ɵɵelementStart(19, \"ion-col\");\n        i0.ɵɵelementStart(20, \"ion-row\", 9);\n        i0.ɵɵelementStart(21, \"ion-col\", 10);\n        i0.ɵɵelement(22, \"ion-icon\", 11);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(23, \"ion-col\", 12);\n        i0.ɵɵelementStart(24, \"p\", 13);\n        i0.ɵɵtext(25, \"Detect my location\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(26, GeolocationPage_div_26_Template, 10, 1, \"div\", 14);\n        i0.ɵɵelement(27, \"br\");\n        i0.ɵɵelement(28, \"br\");\n        i0.ɵɵelement(29, \"br\");\n        i0.ɵɵelementStart(30, \"div\", 0);\n        i0.ɵɵelementStart(31, \"ion-row\");\n        i0.ɵɵelementStart(32, \"ion-col\", 15);\n        i0.ɵɵelementStart(33, \"ion-button\", 16);\n        i0.ɵɵlistener(\"click\", function GeolocationPage_Template_ion_button_click_33_listener() {\n          return ctx.next();\n        });\n        i0.ɵɵtext(34, \"Next\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(35, \"img\", 17);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(5, _c0, ctx.platform.width() < 740));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(7, _c1, ctx.platform.width() > 740));\n        i0.ɵɵadvance(24);\n        i0.ɵɵproperty(\"ngIf\", ctx.loc);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(9, _c2, ctx.platform.width() < 740));\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"disabled\", !ctx.loc);\n      }\n    },\n    directives: [i3.IonContent, i7.NgClass, i3.IonRow, i3.IonCol, i3.IonGrid, i3.IonIcon, i7.NgIf, i3.IonButton],\n    styles: [\".col[_ngcontent-%COMP%]{text-align:end}.para[_ngcontent-%COMP%]{margin-bottom:0;font-size:24px}.geoBox[_ngcontent-%COMP%]{border:1px solid var(--headerColor)}.geoIcon[_ngcontent-%COMP%]{font-size:20px}.detect[_ngcontent-%COMP%], .geoIcon[_ngcontent-%COMP%], .para[_ngcontent-%COMP%]{color:var(--headerColor)}.dev[_ngcontent-%COMP%]{font-size:19px}.banner_bg[_ngcontent-%COMP%]{left:0;width:100%;display:block;border-radius:10px}.blank[_ngcontent-%COMP%]{width:100%;height:100px}\"]\n  });\n  return GeolocationPage;\n})();","map":null,"metadata":{},"sourceType":"module"}